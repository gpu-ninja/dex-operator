---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.12.0
  name: dexidentityproviders.dex.gpu-ninja.com
spec:
  group: dex.gpu-ninja.com
  names:
    kind: DexIdentityProvider
    listKind: DexIdentityProviderList
    plural: dexidentityproviders
    shortNames:
    - idp
    singular: dexidentityprovider
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.phase
      name: Status
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: DexIdentityProvider is a Dex IdP server.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: DexIdentityProviderSpec defines the desired state of the
              Dex idP server.
            properties:
              clientCertificateSecretRef:
                description: ClientCertificateSecretRef is an optional reference to
                  a secret containing a client certificate that the operator can use
                  for connecting to the Dex IdP API server.
                properties:
                  name:
                    description: Name is the name of the secret.
                    type: string
                required:
                - name
                type: object
              connectors:
                description: Connectors holds configuration for connectors.
                items:
                  description: DexIdentityProviderConnectorSpec holds configuration
                    for a connector.
                  properties:
                    id:
                      description: ID is the connector ID.
                      type: string
                    ldap:
                      description: LDAP holds configuration for the LDAP connector.
                      properties:
                        bindPasswordSecretRef:
                          description: BindPasswordSecretRef is a reference to a secret
                            containing the bind password. The connector uses these
                            credentials to search for users and groups.
                          properties:
                            name:
                              description: Name is the name of the secret.
                              type: string
                          required:
                          - name
                          type: object
                        bindUsername:
                          description: BindUsername is the DN of the user to bind
                            with. The connector uses these credentials to search for
                            users and groups.
                          type: string
                        caSecretRef:
                          description: CASecretRef is an optional reference to a secret
                            containing the CA certificate.
                          properties:
                            name:
                              description: Name is the name of the secret.
                              type: string
                          required:
                          - name
                          type: object
                        clientCertificateSecretRef:
                          description: ClientCertificateSecretRef is an optional reference
                            to a secret containing the client certificate and key.
                          properties:
                            name:
                              description: Name is the name of the secret.
                              type: string
                          required:
                          - name
                          type: object
                        groupSearch:
                          description: GroupSearch contains configuration for searching
                            LDAP groups.
                          properties:
                            baseDN:
                              description: BaseDN to start the search from. For example
                                "cn=groups,dc=example,dc=com"
                              type: string
                            filter:
                              description: Filter is an optional filter to apply when
                                searching the directory. For example "(objectClass=posixGroup)"
                              type: string
                            nameAttr:
                              description: NameAttr is the attribute of the group
                                that represents its name.
                              type: string
                            scope:
                              description: 'Scope is the optional scope of the search
                                (default "sub"). Can either be: * "sub" - search the
                                whole sub tree * "one" - only search one level'
                              enum:
                              - sub
                              - one
                              type: string
                            userMatchers:
                              description: "UserMatchers is an array of the field
                                pairs used to match a user to a group. See the \"DexIdentityProviderConnectorLDAPGroupSearchUserMatcher\"
                                struct for the exact field names \n Each pair adds
                                an additional requirement to the filter that an attribute
                                in the group match the user's attribute value. For
                                example that the \"members\" attribute of a group
                                matches the \"uid\" of the user. The exact filter
                                being added is: \n (userMatchers[n].<groupAttr>=userMatchers[n].<userAttr
                                value>)"
                              items:
                                description: DexIdentityProviderConnectorLDAPGroupSearchUserMatcher
                                  holds information about user and group matching.
                                properties:
                                  groupAttr:
                                    description: GroupAttr is the attribute to match
                                      against the group ID.
                                    type: string
                                  userAttr:
                                    description: UserAttr is the attribute to match
                                      against the user ID.
                                    type: string
                                required:
                                - groupAttr
                                - userAttr
                                type: object
                              type: array
                          required:
                          - baseDN
                          - nameAttr
                          - userMatchers
                          type: object
                        host:
                          description: Host is the host and optional port of the LDAP
                            server. If port isn't supplied, it will be guessed based
                            on the TLS configuration.
                          type: string
                        insecureNoSSL:
                          description: InsecureNoSSL is required to connect to a server
                            without TLS.
                          type: boolean
                        insecureSkipVerify:
                          description: InsecureSkipVerify allows connecting to a server
                            without verifying the TLS certificate.
                          type: boolean
                        startTLS:
                          description: StartTLS allows connecting to a server that
                            supports the StartTLS command. If unsupplied secure connections
                            will use the LDAPS protocol.
                          type: boolean
                        userSearch:
                          description: UserSearch contains configuration for searching
                            LDAP users.
                          properties:
                            baseDN:
                              description: BaseDN to start the search from. For example
                                "cn=users,dc=example,dc=com"
                              type: string
                            emailAttr:
                              description: EmailAttr is the attribute to use as the
                                user email (default "mail").
                              type: string
                            emailSuffix:
                              description: EmailSuffix if set, will be appended to
                                the idAttr to construct the email claim. This should
                                not include the @ character.
                              type: string
                            filter:
                              description: Filter is an optional filter to apply when
                                searching the directory. For example "(objectClass=person)"
                              type: string
                            idAttr:
                              description: IDAttr is the attribute to use as the user
                                ID (default "uid").
                              type: string
                            nameAttr:
                              description: NameAttr is the attribute to use as the
                                display name for the user.
                              type: string
                            preferredUsernameAttr:
                              description: PreferredUsernameAttr is the attribute
                                to use as the preferred username for the user.
                              type: string
                            scope:
                              description: 'Scope is the optional scope of the search
                                (default "sub"). Can either be: * "sub" - search the
                                whole sub tree * "one" - only search one level'
                              enum:
                              - sub
                              - one
                              type: string
                            username:
                              description: Username is the attribute to match against
                                the inputted username. This will be translated and
                                combined with the other filter as "(<attr>=<username>)".
                              type: string
                          required:
                          - baseDN
                          - username
                          type: object
                        usernamePrompt:
                          description: UsernamePrompt allows users to override the
                            username attribute (displayed in the username/password
                            prompt). If unset, the handler will use "Username".
                          type: string
                      required:
                      - bindPasswordSecretRef
                      - bindUsername
                      - groupSearch
                      - host
                      - userSearch
                      type: object
                    name:
                      description: Name is the connector name.
                      type: string
                    oidc:
                      description: OIDC holds configuration for the OIDC connector.
                      properties:
                        acrValues:
                          description: AcrValues (Authentication Context Class Reference
                            Values) that specifies the Authentication Context Class
                            Values within the Authentication Request that the Authorization
                            Server is being requested to use for processing requests
                            from this Client, with the values appearing in order of
                            preference.
                          items:
                            type: string
                          type: array
                        basicAuthUnsupported:
                          description: "BasicAuthUnsupported causes client_secret
                            to be passed as POST parameters instead of basic auth.
                            This is specifically \"NOT RECOMMENDED\" by the OAuth2
                            RFC, but some providers require it. \n https://tools.ietf.org/html/rfc6749#section-2.3.1"
                          type: boolean
                        caSecretRef:
                          description: CASecretRef is an optional reference to a secret
                            containing the CA certificate. Only required if your provider
                            uses a self-signed certificate.
                          properties:
                            name:
                              description: Name is the name of the secret.
                              type: string
                          required:
                          - name
                          type: object
                        claimMapping:
                          description: ClaimMapping is used to map non-standard claims
                            to standard claims. Some providers return non-standard
                            claims (eg. mail). https://openid.net/specs/openid-connect-core-1_0.html#Claims
                          properties:
                            email:
                              description: EmailKey is the key which contains the
                                email claims, defaults to "email".
                              type: string
                            groups:
                              description: GroupsKey is the key which contains the
                                groups claims, defaults to "groups".
                              type: string
                            preferred_username:
                              description: PreferredUsernameKey is the key which contains
                                the preferred username claims, defaults to "preferred_username".
                              type: string
                          type: object
                        clientSecretRef:
                          description: ClientSecretRef is a reference to a secret
                            containing the OAuth client id and secret.
                          properties:
                            name:
                              description: Name is the name of the secret.
                              type: string
                          required:
                          - name
                          type: object
                        getUserInfo:
                          description: GetUserInfo uses the userinfo endpoint to get
                            additional claims for the token. This is especially useful
                            where upstreams return "thin" id tokens
                          type: boolean
                        insecureEnableGroups:
                          description: InsecureEnableGroups enables groups claims.
                          type: boolean
                        insecureSkipEmailVerified:
                          description: InsecureSkipEmailVerified if set will override
                            the value of email_verified to true in the returned claims.
                          type: boolean
                        insecureSkipVerify:
                          description: InsecureSkipVerify disables TLS certificate
                            verification.
                          type: boolean
                        issuer:
                          description: Issuer is the URL of the OIDC issuer.
                          type: string
                        overrideClaimMapping:
                          description: OverrideClaimMapping will be used to override
                            the options defined in claimMappings. i.e. if there are
                            'email' and `preferred_email` claims available, by default
                            Dex will always use the `email` claim independent of the
                            ClaimMapping.EmailKey. This setting allows you to override
                            the default behavior of Dex and enforce the mappings defined
                            in `claimMapping`. Defaults to false.
                          type: boolean
                        promptType:
                          description: PromptType will be used fot the prompt parameter
                            (when offline_access, by default prompt=consent).
                          type: string
                        redirectURI:
                          description: RedirectURI is the OAuth redirect URI.
                          type: string
                        scopes:
                          description: Scopes is an optional list of scopes to request.
                            If omitted, defaults to "profile" and "email".
                          items:
                            type: string
                          type: array
                        userIDKey:
                          description: UserIDKey is the claim key to use for the user
                            ID (default sub).
                          type: string
                        userNameKey:
                          description: UserNameKey is the claim key to use for the
                            username (default name).
                          type: string
                      required:
                      - clientSecretRef
                      - issuer
                      - redirectURI
                      type: object
                    type:
                      description: Type is the connector type to use.
                      enum:
                      - ldap
                      - oidc
                      type: string
                  required:
                  - id
                  - name
                  - type
                  type: object
                minItems: 1
                type: array
              expiry:
                description: Expiry holds configuration for tokens, signing keys,
                  etc.
                properties:
                  authRequests:
                    description: AuthRequests defines the duration of time for which
                      the AuthRequests will be valid.
                    type: string
                  deviceRequests:
                    description: DeviceRequests defines the duration of time for which
                      the DeviceRequests will be valid.
                    type: string
                  idTokens:
                    description: IDTokens defines the duration of time for which the
                      IdTokens will be valid.
                    type: string
                  refreshTokens:
                    description: RefreshTokens defines refresh tokens expiry policy.
                    properties:
                      absoluteLifetime:
                        description: AbsoluteLifetime defines the duration of time
                          after which a refresh token will expire.
                        type: string
                      disableRotation:
                        description: DisableRotation disables refresh token rotation.
                        type: boolean
                      reuseInterval:
                        description: ReuseInterval defines the duration of time after
                          which a refresh token can be reused.
                        type: string
                      validIfNotUsedFor:
                        description: ValidIfNotUsedFor defines the duration of time
                          after which a refresh token will expire if not used.
                        type: string
                    type: object
                  signingKeys:
                    description: SigningKeys defines the duration of time after which
                      the SigningKeys will be rotated.
                    type: string
                type: object
              frontend:
                description: Frontend holds the server's frontend templates and asset
                  configuration.
                properties:
                  dir:
                    description: "Dir is a file path to static web assets. \n It is
                      expected to contain the following directories: * static - Static
                      static served at \"( issuer URL )/static\". * templates - HTML
                      templates controlled by dex. * themes/(theme) - Static static
                      served at \"( issuer URL )/theme\"."
                    type: string
                  issuer:
                    description: Issuer is the name of the issuer, used in the HTML
                      templates. Defaults to "dex".
                    type: string
                  logoURL:
                    description: LogoURL is the URL of the logo to use in the HTML
                      templates. Defaults to "( issuer URL )/theme/logo.png"
                    type: string
                  theme:
                    description: Theme is the name of the theme to use. Defaults to
                      "light".
                    type: string
                type: object
              grpc:
                description: GRPC holds configuration for the gRPC server.
                properties:
                  addr:
                    description: Addr is the address to bind the gRPC server to.
                    type: string
                  annotations:
                    additionalProperties:
                      type: string
                    description: Annotations is an optional map of additional annotations
                      to add to the gRPC server's service.
                    type: object
                  certificateSecretRef:
                    description: CertificateSecretRef is an optional reference to
                      a secret containing the TLS certificate and key to use for the
                      gRPC server.
                    properties:
                      name:
                        description: Name is the name of the secret.
                        type: string
                    required:
                    - name
                    type: object
                  clientCASecretRef:
                    description: ClientCASecretRef is an optional reference to a secret
                      containing the client CA.
                    properties:
                      name:
                        description: Name is the name of the secret.
                        type: string
                    required:
                    - name
                    type: object
                  reflection:
                    description: Reflection enables gRPC server reflection.
                    type: boolean
                required:
                - addr
                type: object
              image:
                description: Image is the Dex IdP image to use.
                type: string
              issuer:
                description: Issuer is the base path of Dex and the external name
                  of the OpenID Connect service. This is the canonical URL that all
                  clients MUST use to refer to Dex.
                type: string
              localStorage:
                description: LocalStorage configures local persistent storage for
                  the Dex container. This is useful when using a SQLite database.
                properties:
                  mountPath:
                    description: MountPath is the path at which the local storage
                      will be mounted in the container.
                    type: string
                  size:
                    description: Size is the size of the persistent volume that will
                      be used to store Dex's local sqlite database.
                    type: string
                  storageClassName:
                    description: StorageClassName is the name of the storage class
                      that will be used to provision the persistent volume.
                    type: string
                required:
                - mountPath
                - size
                type: object
              logger:
                description: Logger holds configuration required to customize logging
                  for dex.
                properties:
                  format:
                    description: Format specifies the format to be used for logging.
                    type: string
                  level:
                    description: Level sets logging level severity.
                    type: string
                type: object
              oauth2:
                description: OAuth2 holds configuration for OAuth2.
                properties:
                  alwaysShowLoginScreen:
                    description: AlwaysShowLoginScreen, if specified, show the connector
                      selection screen even if there's only one.
                    type: boolean
                  grantTypes:
                    description: GrantTypes is a list of allowed grant types, defaults
                      to all supported types.
                    items:
                      type: string
                    type: array
                  passwordConnector:
                    description: PasswordConnector is a specific connector to user
                      for password grants.
                    type: string
                  responseTypes:
                    description: ResponseTypes is a list of allowed response types,
                      defaults to all supported types.
                    items:
                      type: string
                    type: array
                  skipApprovalScreen:
                    description: SkipApprovalScreen, if specified, do not prompt the
                      user to approve client authorization. The act of logging in
                      implies authorization.
                    type: boolean
                type: object
              replicas:
                description: Replicas is the optional number of replicas of the Dex
                  IdP server to run. Only supported if using postgresql storage.
                format: int32
                type: integer
              storage:
                description: Storage configures the storage for Dex.
                properties:
                  postgres:
                    description: Postgres holds the configuration for the postgres
                      storage type.
                    properties:
                      connMaxLifetime:
                        description: ConnMaxLifetime is the maximum amount of time
                          a connection may be reused (default forever).
                        type: string
                      connectionTimeout:
                        description: ConnectionTimeout is the maximum amount of time
                          to wait for a connection to become available.
                        type: string
                      credentialsSecretRef:
                        description: CredentialsSecretRef is a reference to a secret
                          containing the username and password to use for authentication.
                        properties:
                          name:
                            description: Name is the name of the secret.
                            type: string
                        required:
                        - name
                        type: object
                      database:
                        description: Database is the name of the database to connect
                          to.
                        type: string
                      host:
                        description: Host is the host to connect to.
                        type: string
                      maxIdleConns:
                        description: MaxIdleConns is the maximum number of connections
                          in the idle connection pool (default 5).
                        type: integer
                      maxOpenConns:
                        description: MaxOpenConns is the maximum number of open connections
                          to the database (default 5).
                        type: integer
                      port:
                        description: Port is the port to connect to.
                        type: integer
                      ssl:
                        description: SSL holds optional TLS configuration for postgres.
                        properties:
                          caSecretRef:
                            description: CASecretRef is an optional reference to a
                              secret containing the CA certificate.
                            properties:
                              name:
                                description: Name is the name of the secret.
                                type: string
                            required:
                            - name
                            type: object
                          clientCertificateSecretRef:
                            description: ClientCertificateSecretRef is an optional
                              reference to a secret containing the client certificate
                              and key.
                            properties:
                              name:
                                description: Name is the name of the secret.
                                type: string
                            required:
                            - name
                            type: object
                          mode:
                            description: Mode is the SSL mode to use.
                            type: string
                          serverName:
                            description: ServerName ensures that the certificate matches
                              the given hostname the client is connecting to.
                            type: string
                        type: object
                    required:
                    - credentialsSecretRef
                    - database
                    - host
                    - port
                    type: object
                  sqlite3:
                    description: Sqlite3 holds the configuration for the sqlite3 storage
                      type.
                    properties:
                      file:
                        description: File is the path to the sqlite3 database file.
                        type: string
                    required:
                    - file
                    type: object
                  type:
                    description: Type is the storage type to use.
                    enum:
                    - memory
                    - sqlite3
                    - postgres
                    type: string
                required:
                - type
                type: object
              web:
                description: Web holds configuration for the web server.
                properties:
                  allowedOrigins:
                    description: AllowedOrigins is a list of allowed origins for CORS
                      requests.
                    items:
                      type: string
                    type: array
                  annotations:
                    additionalProperties:
                      type: string
                    description: Annotations is an optional map of additional annotations
                      to add to the web server's service.
                    type: object
                  certificateSecretRef:
                    description: CertificateSecretRef is an optional reference to
                      a secret containing the TLS certificate and key to use for HTTPS.
                    properties:
                      name:
                        description: Name is the name of the secret.
                        type: string
                    required:
                    - name
                    type: object
                  http:
                    description: HTTP is the address to bind HTTP server to.
                    type: string
                  https:
                    description: HTTPS is the address to bind HTTPS server to.
                    type: string
                type: object
            required:
            - connectors
            - grpc
            - image
            - issuer
            - storage
            - web
            type: object
          status:
            description: DexIdentityProviderStatus defines the observed state of the
              Dex idP server.
            properties:
              conditions:
                description: Conditions represents the latest available observations
                  of an DexIdentityProvider's current state.
                items:
                  description: "Condition contains details for one aspect of the current
                    state of this API Resource. --- This struct is intended for direct
                    use as an array at the field path .status.conditions.  For example,
                    \n type FooStatus struct{ // Represents the observations of a
                    foo's current state. // Known .status.conditions.type are: \"Available\",
                    \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge
                    // +listType=map // +listMapKey=type Conditions []metav1.Condition
                    `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\"
                    protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }"
                  properties:
                    lastTransitionTime:
                      description: lastTransitionTime is the last time the condition
                        transitioned from one status to another. This should be when
                        the underlying condition changed.  If that is not known, then
                        using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: message is a human readable message indicating
                        details about the transition. This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: observedGeneration represents the .metadata.generation
                        that the condition was set based upon. For instance, if .metadata.generation
                        is currently 12, but the .status.conditions[x].observedGeneration
                        is 9, the condition is out of date with respect to the current
                        state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: reason contains a programmatic identifier indicating
                        the reason for the condition's last transition. Producers
                        of specific condition types may define expected values and
                        meanings for this field, and whether the values are considered
                        a guaranteed API. The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase.
                        --- Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              observedGeneration:
                description: ObservedGeneration is the most recent generation observed
                  for this DexIdentityProvider by the controller.
                format: int64
                type: integer
              phase:
                description: Phase is the current state of the Dex idP server.
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
